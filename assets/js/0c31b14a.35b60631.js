"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9565],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return r?o.createElement(f,l(l({ref:t},d),{},{components:r})):o.createElement(f,l({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2986:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var o=r(7462),n=r(3366),a=(r(7294),r(3905)),l=["components"],i={},s="ttt.py",c={unversionedId:"Tello/ttt",id:"Tello/ttt",isDocsHomePage:!1,title:"ttt.py",description:"Essa p\xe1gina tem o objetivo de explicar o funcionamento do c\xf3digo ttt.py, que permite o usu\xe1rio jogar jogo da velha com o drone Tello.",source:"@site/../docs/Tello/ttt.md",sourceDirName:"Tello",slug:"/Tello/ttt",permalink:"/knowledge_base/docs/Tello/ttt",editUrl:"https://github.com/SkyRats/knowledge_base/tree/main/docs/../docs/Tello/ttt.md",tags:[],version:"current",frontMatter:{},sidebar:"docssidebar",previous:{title:"Fun\xe7\xf5es e vari\xe1veis",permalink:"/knowledge_base/docs/Tello/functions"},next:{title:"ROS1",permalink:"/knowledge_base/docs/Voo autonomo/ros1"}},d=[{value:"tttAI",id:"tttai",children:[],level:2},{value:"<strong>init</strong>()",id:"init",children:[],level:2},{value:"tello_startup()",id:"tello_startup",children:[],level:2},{value:"filter_small()",id:"filter_small",children:[],level:2},{value:"match_shape ()",id:"match_shape-",children:[],level:2},{value:"most_frequent()",id:"most_frequent",children:[],level:2},{value:"get_common()",id:"get_common",children:[],level:2},{value:"get_mask()",id:"get_mask",children:[],level:2},{value:"show_drone_play()",id:"show_drone_play",children:[],level:2},{value:"get_squares()",id:"get_squares",children:[],level:2},{value:"detect_board()",id:"detect_board",children:[],level:2},{value:"read_board()",id:"read_board",children:[],level:2},{value:"print_board()",id:"print_board",children:[],level:2},{value:"play_ttt()",id:"play_ttt",children:[],level:2}],p={toc:d};function u(e){var t=e.components,r=(0,n.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tttpy"},"ttt.py"),(0,a.kt)("p",null,"Essa p\xe1gina tem o objetivo de explicar o funcionamento do c\xf3digo ttt.py, que permite o usu\xe1rio jogar jogo da velha com o drone Tello."),(0,a.kt)("h1",{id:"outras-depend\xeancias"},"Outras depend\xeancias"),(0,a.kt)("p",null,"O c\xf3digo usa as seguintes depend\xeancias:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import cv2\nimport numpy as np\nimport time\nfrom tttAI import IA\nfrom djitellopy import Tello\n")),(0,a.kt)("p",null,"Opencv para a manipula\xe7\xe3o e tratamento de imagens, numpy para a cria\xe7\xe3o das m\xe1scaras (em suporte do opencv), time para a fun\xe7\xe3o sleep() e djitellopy para controle do drone."),(0,a.kt)("h2",{id:"tttai"},"tttAI"),(0,a.kt)("p",null,"A depend\xeancia restante \xe9 uma implementa\xe7\xe3o do algoritmo Minimax feita para jogar jogo da velha, criado por Clederson Cruz sob licensa GPL. Foi utilizado para tomar as decis\xf5es das jogadas do drone."),(0,a.kt)("h1",{id:"classe-tttdetection"},"Classe tttDetection"),(0,a.kt)("h2",{id:"init"},(0,a.kt)("strong",{parentName:"h2"},"init"),"()"),(0,a.kt)("p",null,"Inicializa o objeto que representa o tello, bem como o objeto do algoritmo que jogar\xe1 pelo drone e por fim cria os contornos dos jogadores, abrindo suas respectivas imagens que, depois de transformadas em grayscale e aplicado um filtro threshold, retornam os contornos sem usar uma aproxima\xe7\xe3o (tag cv2.CHAIN","_","APPROX_NONE)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def __init__(self):\n        self.tello = Tello()\n        self.ia = IA()\n        \n        # Contornos do player1 (X)\n        player1 = cv2.imread("./player1.png")\n        player1_gray = 255 - cv2.cvtColor(player1, cv2.COLOR_BGR2GRAY)\n        \n        _, thresh1 = cv2.threshold(player1_gray, 127, 255, 0)\n        contours, _ = cv2.findContours(thresh1, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n        self.player1_cnt = contours[0]\n\n        # Contornos do player2 (Check mark)\n        player2 = cv2.imread("./player2.png")\n        player2_gray = 255 - cv2.cvtColor(player2, cv2.COLOR_BGR2GRAY)\n\n        _, thresh2 = cv2.threshold(player2_gray, 127, 255, 0)\n        contours, _ = cv2.findContours(thresh2, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n        self.player2_cnt = contours[0]\n')),(0,a.kt)("h2",{id:"tello_startup"},"tello_startup()"),(0,a.kt)("p",null,"Se conecta ao Tello e come\xe7a a transmiss\xe3o da c\xe2mera."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def tello_startup(self):\n        self.tello.connect()\n        self.tello.streamon()\n")),(0,a.kt)("h2",{id:"filter_small"},"filter_small()"),(0,a.kt)("p",null,"Dado uma lista de contornos, elimina os que possu\xedrem uma \xe1rea menor do que a \xe1rea limite. Tem o objetivo de limpar as imagens dos quadrantes para uma melhor detec\xe7\xe3o. N\xe3o \xe9 necessariamente importante ou particularmente efetiva, mas n\xe3o afeta significativamente a performance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def filter_small(self, contours, min_area):\n        \n        filtered_contours = []\n\n        for contour in contours:\n            if cv2.contourArea(contour) >= min_area:\n                filtered_contours.append(contour)\n\n        return filtered_contours\n")),(0,a.kt)("h2",{id:"match_shape-"},"match_shape ()"),(0,a.kt)("p",null,"Dado uma lista de contornos (dos quadrantes do tabuleiro) e uma toler\xe2ncia, verifica se um desses contornos \xe9 pr\xf3ximo o suficiente do modelo dos jogadores."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def match_shape(self, square_cnts, max_tolerance):\n        for contour in square_cnts:\n                        \n            if cv2.matchShapes(contour, self.player1_cnt, 1, 0.0) < max_tolerance:\n                return 1\n\n            elif cv2.matchShapes(contour, self.player2_cnt, 1, 0.0) < max_tolerance:\n                return -1\n\n        return 0\n")),(0,a.kt)("h2",{id:"most_frequent"},"most_frequent()"),(0,a.kt)("h2",{id:"get_common"},"get_common()"),(0,a.kt)("h2",{id:"get_mask"},"get_mask()"),(0,a.kt)("h2",{id:"show_drone_play"},"show","_","drone_play()"),(0,a.kt)("h2",{id:"get_squares"},"get_squares()"),(0,a.kt)("h2",{id:"detect_board"},"detect_board()"),(0,a.kt)("h2",{id:"read_board"},"read_board()"),(0,a.kt)("h2",{id:"print_board"},"print_board()"),(0,a.kt)("h2",{id:"play_ttt"},"play_ttt()"))}u.isMDXComponent=!0}}]);