"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8722],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4052:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={},c="Sensores de dist\xe2ncia",u={unversionedId:"Componentes Eletr\xf4nicos/Sensores de dist\xe2ncia",id:"Componentes Eletr\xf4nicos/Sensores de dist\xe2ncia",isDocsHomePage:!1,title:"Sensores de dist\xe2ncia",description:"Escrito por Jo\xe3o P. Soares. \xdaltima atualiza\xe7\xe3o: 03/02/2023",source:"@site/../docs/Componentes Eletr\xf4nicos/Sensores de dist\xe2ncia.md",sourceDirName:"Componentes Eletr\xf4nicos",slug:"/Componentes Eletr\xf4nicos/Sensores de dist\xe2ncia",permalink:"/knowledge_base/docs/Componentes Eletr\xf4nicos/Sensores de dist\xe2ncia",editUrl:"https://github.com/SkyRats/knowledge_base/tree/main/docs/../docs/Componentes Eletr\xf4nicos/Sensores de dist\xe2ncia.md",tags:[],version:"current",frontMatter:{},sidebar:"docssidebar",previous:{title:"Como Fazer um switch com Mosfet?",permalink:"/knowledge_base/docs/Componentes Eletr\xf4nicos/Mosfet"},next:{title:"Como funciona um transistor",permalink:"/knowledge_base/docs/Componentes Eletr\xf4nicos/Transistor"}},l=[{value:"US100",id:"us100",children:[{value:"TRIG ECHO",id:"trig-echo",children:[],level:3},{value:"UART",id:"uart",children:[],level:3}],level:2}],p={toc:l};function d(e){var t=e.components,i=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sensores-de-dist\xe2ncia"},"Sensores de dist\xe2ncia"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("em",{parentName:"p"},"Escrito por ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/J0t4py"},"Jo\xe3o P. Soares"),". \xdaltima atualiza\xe7\xe3o: 03/02/2023"))),(0,s.kt)("p",null,"Atualmente utilizamos 2 tipos de sensores de dist\xe2ncia, o US100 e HC-SR04. Esse texto busca explicitar a diferen\xe7a entre os dois e ensinar a us\xe1-los."),(0,s.kt)("h2",{id:"us100"},"US100"),(0,s.kt)("p",null,"O US100 \xe9 um sensor de dist\xe2ncia que trabalha com 2 protocolos de comunica\xe7\xe3o, serial(ECHO,TRIG) e UART."),(0,s.kt)("h3",{id:"trig-echo"},"TRIG ECHO"),(0,s.kt)("p",null," Esse \xe9 o modo mais anal\xf3gico de utilizar, atrav\xe9s de um c\xe1lculo com a velocidade do som. Segue abaixo o diagrama de como funciona:"),(0,s.kt)("p",null," ",(0,s.kt)("img",{alt:"Esquema TRIG ECHO",src:n(830).Z})),(0,s.kt)("p",null," Segue abaixo um c\xf3digo para usar o sensor desse modo:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python3"},'import RPi.GPIO as GPIO\nimport time\nGPIO.setmode(GPIO.BOARD)\n# set pins for trigger and echo\ntrig = 16\necho = 18\n# set up pins as output/input\nGPIO.setup(trig,GPIO.OUT)\nGPIO.setup(echo,GPIO.IN)\n# set trigger pin to low\nGPIO.output(trig, False)\nprint("Waiting for sensor to settle")\ntime.sleep(2)\n# send a 10us pulse to trigger\nGPIO.output(trig, True)\ntime.sleep(0.00001)\nGPIO.output(trig, False)\n# measure echo duration\nwhile GPIO.input(echo)==0:\n pulse_start = time.time()\nwhile GPIO.input(echo)==1:\n pulse_end = time.time()\npulse_duration = pulse_end - pulse_start\n# calculate distance (in centimeters)\ndistance = pulse_duration * 17150\n# round distance to 2 decimal places\ndistance = round(distance, 2)\nprint("Distance:", distance, "cm")\nGPIO.cleanup()\n')),(0,s.kt)("h3",{id:"uart"},"UART"),(0,s.kt)("p",null," Esse m\xe9todo \xe9 mais recomendado de ser usado pois os c\xe1lculos s\xe3o feitos dentro do sensor e utilizam a temperatura como par\xe2metro para determinar a velocidade do ar. Atrav\xe9s desse m\xe9todo tamb\xe9m \xe9 poss\xedvel obter a temperatura."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'import time\nimport board\nimport adafruit_us100\n\nclass DistanceSensor:\n   def __init__(self, uart):\n       self._us100 = adafruit_us100.US100(uart)\n\n   def get_distance(self):\n       return self._us100.distance\n\n   def get_temperature(self):\n       return self._us100.temperature\n\n# create UART connection\nuart = board.UART\n\n# create DistanceSensor object\ndistance_sensor = DistanceSensor(uart)\n\n# loop to continuously measure distance and temperature and print results\ntry:\n   while True:\n       # read distance and temperature values\n       distance = distance_sensor.get_distance()\n       temperature = distance_sensor.get_temperature()\n\n       # print distance and temperature values\n       print("Distance:", round(distance, 2), "cm")\n       print("Temperature:", round(temperature, 2), "\xb0C")\n       time.sleep(1)\n\nexcept KeyboardInterrupt:\n   pass\n')))}d.isMDXComponent=!0},830:function(e,t,n){t.Z=n.p+"assets/images/Work-principle-of-the-HC-SR04-sensor-39-84d6df28c9af0567ec5a85d5c14b31ac.jpg"}}]);