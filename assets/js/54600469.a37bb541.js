"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7047],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5333:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={},u="Sensores de dist\xe2ncia",c={unversionedId:"Componentes Eletr\xf4nicos/US100 e HC-SR04",id:"Componentes Eletr\xf4nicos/US100 e HC-SR04",isDocsHomePage:!1,title:"Sensores de dist\xe2ncia",description:"Escrito por Jo\xe3o P. Soares. \xdaltima atualiza\xe7\xe3o: 27/03/2023",source:"@site/../docs/Componentes Eletr\xf4nicos/US100 e HC-SR04.md",sourceDirName:"Componentes Eletr\xf4nicos",slug:"/Componentes Eletr\xf4nicos/US100 e HC-SR04",permalink:"/knowledge_base/docs/Componentes Eletr\xf4nicos/US100 e HC-SR04",editUrl:"https://github.com/SkyRats/knowledge_base/tree/main/docs/../docs/Componentes Eletr\xf4nicos/US100 e HC-SR04.md",tags:[],version:"current",frontMatter:{},sidebar:"docssidebar",previous:{title:"Como funciona um transistor",permalink:"/knowledge_base/docs/Componentes Eletr\xf4nicos/Transistor"},next:{title:"Ardupilot for Skyrats",permalink:"/knowledge_base/docs/Firmwares/IntroArdupilot"}},l=[{value:"US100",id:"us100",children:[{value:"Requisitos",id:"requisitos",children:[],level:3},{value:"Anal\xf3gico (TRIG ECHO)",id:"anal\xf3gico-trig-echo",children:[],level:3},{value:"UART",id:"uart",children:[],level:3}],level:2}],p={toc:l},d="wrapper";function m(e){var t=e.components,i=(0,o.Z)(e,s);return(0,a.kt)(d,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sensores-de-dist\xe2ncia"},"Sensores de dist\xe2ncia"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Escrito por ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/J0t4py"},"Jo\xe3o P. Soares"),". \xdaltima atualiza\xe7\xe3o: 27/03/2023"))),(0,a.kt)("p",null,"Atualmente utilizamos 2 tipos de sensores de dist\xe2ncia, o US100 e HC-SR04. Como o US100 tem um modo que tem comportamento identico ao HC-SR04, esse texto foca no US100 pois esse conte\xfado j\xe1 cobre o outro sensor."),(0,a.kt)("h2",{id:"us100"},"US100"),(0,a.kt)("p",null,"O US100 \xe9 um sensor de dist\xe2ncia que trabalha com 2 protocolos de comunica\xe7\xe3o, serial(ECHO,TRIG) e UART. O modo pode ser selecionado curtando 2 pinos na placa do sensor, quando eles est\xe3o curtados o modo usado sera o UART (por padr\xe3o ele vem curtado)"),(0,a.kt)("h3",{id:"requisitos"},"Requisitos"),(0,a.kt)("p",null,"\xc9 necess\xe1rio instalar algumas bibliotecas, que podem ser instaladas com pip. Segue abaixo como instalar e quais instalar"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\npip3 install RPi.GPIO\npip3 install Adafruit-Blinka\npip3 install adafruit-circuitpython-us100 #Essa segunda biblioteca s\xf3 \xe9 usada para o modo UART\n")),(0,a.kt)("h3",{id:"anal\xf3gico-trig-echo"},"Anal\xf3gico (TRIG ECHO)"),(0,a.kt)("p",null," Esse \xe9 o modo mais anal\xf3gico de utilizar, atrav\xe9s de um c\xe1lculo com a velocidade do som. O HC-SR04 funciona exatamente dessa forma e o c\xf3digo presente aqui deve funcionar nele."),(0,a.kt)("p",null," Segue abaixo o diagrama de como funciona:"),(0,a.kt)("p",null," ",(0,a.kt)("img",{alt:"Esquema TRIG ECHO",src:n(830).Z})),(0,a.kt)("p",null," Segue abaixo um c\xf3digo para usar o sensor desse modo (utiliza o circuitpython blinka):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python3"},'import RPi.GPIO as GPIO\nimport time\nGPIO.setmode(GPIO.BOARD)\n# set pins for trigger and echo\ntrig = 16\necho = 18\n# set up pins as output/input\nGPIO.setup(trig,GPIO.OUT)\nGPIO.setup(echo,GPIO.IN)\n# set trigger pin to low\nGPIO.output(trig, False)\nprint("Waiting for sensor to settle")\ntime.sleep(2)\n# send a 10us pulse to trigger\nGPIO.output(trig, True)\ntime.sleep(0.00001)\nGPIO.output(trig, False)\n# measure echo duration\nwhile GPIO.input(echo)==0:\n pulse_start = time.time()\nwhile GPIO.input(echo)==1:\n pulse_end = time.time()\npulse_duration = pulse_end - pulse_start\n# calculate distance (in centimeters)\ndistance = pulse_duration * 17150\n# round distance to 2 decimal places\ndistance = round(distance, 2)\nprint("Distance:", distance, "cm")\nGPIO.cleanup()\n')),(0,a.kt)("h3",{id:"uart"},"UART"),(0,a.kt)("p",null," Esse m\xe9todo \xe9 mais recomendado de ser usado pois os c\xe1lculos s\xe3o feitos dentro do sensor e utilizam a temperatura como par\xe2metro para determinar a velocidade do som no ar. Atrav\xe9s desse m\xe9todo tamb\xe9m \xe9 poss\xedvel obter a temperatura. No c\xf3digo a seguir usamos uma biblioteca pr\xf3pria para o sensor, o adafruit_us100 e o circuitpython (blinka). essas 2 bibliotecas podem ser instaladas por pip"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python3"},'import time\nimport board\nimport adafruit_us100\n\nclass DistanceSensor:\n   def __init__(self, uart):\n       self._us100 = adafruit_us100.US100(uart)\n\n   def get_distance(self):\n       return self._us100.distance\n\n   def get_temperature(self):\n       return self._us100.temperature\n\nuart = board.UART\ndistance_sensor = DistanceSensor(uart)\n\ntry:\n   while True:\n       # read distance and temperature values\n       distance = distance_sensor.get_distance()\n       temperature = distance_sensor.get_temperature()\n\n       # print distance and temperature values\n       print("Distance:", round(distance, 2), "cm")\n       print("Temperature:", round(temperature, 2), "\xb0C")\n       time.sleep(1)\n\nexcept KeyboardInterrupt:\n   pass\n')))}m.isMDXComponent=!0},830:function(e,t,n){t.Z=n.p+"assets/images/Work-principle-of-the-HC-SR04-sensor-39-84d6df28c9af0567ec5a85d5c14b31ac.jpg"}}]);